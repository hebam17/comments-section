{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}(); // Manages the updates of all `<ReactTimeAgo/>` elements on a page.\n// The reasons for going with `requestAnimationFrame()`:\n// * `requestAnimationFrame` won't be called when a tab is in background.\n// * Chrome has bugs when handling `setTimeout()`: https://www.npmjs.com/package/request-animation-frame-timeout\n// `requestAnimationFrame()` polyfill for old browsers.\n\n\nimport requestAnimationFrame from 'raf';\nimport binarySearch from './helpers/binarySearch';\nexport default {\n  instances: [],\n  add: function add(instance) {\n    var _this = this;\n\n    var wasIdle = this.instances.length === 0;\n\n    _add(this.instances, instance);\n\n    if (wasIdle) {\n      this.start();\n    }\n\n    return {\n      stop: function stop() {\n        remove(_this.instances, instance);\n\n        if (_this.instances.length === 0) {\n          _this.stop();\n        }\n      },\n      forceUpdate: function forceUpdate() {\n        updateInstance(instance, _this.instances);\n      }\n    };\n  },\n  tick: function tick() {\n    var now = Date.now();\n\n    while (true) {\n      var instance = this.instances[0];\n\n      if (now >= instance.nextUpdateTime) {\n        updateInstance(instance, this.instances);\n      } else {\n        break;\n      }\n    }\n  },\n  scheduleNextTick: function scheduleNextTick() {\n    var _this2 = this;\n\n    this.scheduledTick = requestAnimationFrame(function () {\n      _this2.tick();\n\n      _this2.scheduleNextTick();\n    });\n  },\n  start: function start() {\n    this.scheduleNextTick();\n  },\n  stop: function stop() {\n    requestAnimationFrame.cancel(this.scheduledTick);\n  }\n};\n\nfunction _updateInstance(instance) {\n  var _instance$getNextValu = instance.getNextValue(),\n      _instance$getNextValu2 = _slicedToArray(_instance$getNextValu, 2),\n      value = _instance$getNextValu2[0],\n      nextUpdateTime = _instance$getNextValu2[1];\n\n  instance.setValue(value);\n  instance.nextUpdateTime = nextUpdateTime;\n}\n\nfunction updateInstance(instance, instances) {\n  _updateInstance(instance);\n\n  remove(instances, instance);\n\n  _add(instances, instance);\n}\n\nfunction _add(instances, instance) {\n  var i = findTargetIndex(instances, instance);\n  instances.splice(i, 0, instance);\n}\n\nfunction remove(instances, instance) {\n  var i = instances.indexOf(instance);\n  instances.splice(i, 1);\n}\n\nfunction findTargetIndex(instances, instance) {\n  var nextUpdateTime = instance.nextUpdateTime;\n  return binarySearch(instances, function (instance) {\n    if (instance.nextUpdateTime === nextUpdateTime) {\n      return 0;\n    } else if (instance.nextUpdateTime > nextUpdateTime) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAAA;AAEA;AACA;AACA;AAEA;;;AACA,OAAOA,qBAAP,MAAkC,KAAlC;AAEA,OAAOC,YAAP,MAAyB,wBAAzB;AAEA,eAAe;AACdC,aAAW,EADG;AAEdC,KAFc,eAEVC,QAFU,EAEA;AAAA;;AACb,QAAMC,UAAU,KAAKH,SAAL,CAAeI,MAAf,KAA0B,CAA1C;;AACAH,SAAI,KAAKD,SAATC,EAAoBC,QAApBD;;AACA,QAAIE,OAAJ,EAAa;AACZ,WAAKE,KAAL;AACA;;AACD,WAAO;AACNC,YAAM,gBAAM;AACXC,eAAOC,MAAKR,SAAZO,EAAuBL,QAAvBK;;AACA,YAAIC,MAAKR,SAAL,CAAeI,MAAf,KAA0B,CAA9B,EAAiC;AAChCI,gBAAKF,IAAL;AACA;AALI;AAONG,mBAAa,uBAAM;AAClBC,uBAAeR,QAAfQ,EAAyBF,MAAKR,SAA9BU;AACA;AATK,KAAP;AARa;AAoBdC,MApBc,kBAoBP;AACN,QAAMC,MAAMC,KAAKD,GAALC,EAAZ;;AACA,WAAO,IAAP,EAAa;AACZ,UAAMX,WAAW,KAAKF,SAAL,CAAe,CAAf,CAAjB;;AACA,UAAIY,OAAOV,SAASY,cAApB,EAAoC;AACnCJ,uBAAeR,QAAfQ,EAAyB,KAAKV,SAA9BU;AADD,aAEO;AACN;AACA;AACD;AA7BY;AA+BdK,kBA/Bc,8BA+BK;AAAA;;AAClB,SAAKC,aAAL,GAAqBlB,sBAAsB,YAAM;AAChDmB,aAAKN,IAAL;;AACAM,aAAKF,gBAAL;AAFoB,MAArB;AAhCa;AAqCdV,OArCc,mBAqCN;AACP,SAAKU,gBAAL;AAtCa;AAwCdT,MAxCc,kBAwCP;AACNR,0BAAsBoB,MAAtBpB,CAA6B,KAAKkB,aAAlClB;AACA;AA1Ca,CAAf;;AA6CA,SAASqB,eAAT,CAAyBjB,QAAzB,EAAmC;AAAA,8BACFA,SAASkB,YAATlB,EADE;AAAA;AAAA,MAC3BmB,KAD2B;AAAA,MACpBP,cADoB;;AAElCZ,WAASoB,QAATpB,CAAkBmB,KAAlBnB;AACAA,WAASY,cAATZ,GAA0BY,cAA1BZ;AACA;;AAED,SAASQ,cAAT,CAAwBR,QAAxB,EAAkCF,SAAlC,EAA6C;AAC5CmB,kBAAgBjB,QAAhBiB;;AACAZ,SAAOP,SAAPO,EAAkBL,QAAlBK;;AACAN,OAAID,SAAJC,EAAeC,QAAfD;AACA;;AAED,SAASA,IAAT,CAAaD,SAAb,EAAwBE,QAAxB,EAAkC;AACjC,MAAMqB,IAAIC,gBAAgBxB,SAAhBwB,EAA2BtB,QAA3BsB,CAAV;AACAxB,YAAUyB,MAAVzB,CAAiBuB,CAAjBvB,EAAoB,CAApBA,EAAuBE,QAAvBF;AACA;;AAED,SAASO,MAAT,CAAgBP,SAAhB,EAA2BE,QAA3B,EAAqC;AACpC,MAAMqB,IAAIvB,UAAU0B,OAAV1B,CAAkBE,QAAlBF,CAAV;AACAA,YAAUyB,MAAVzB,CAAiBuB,CAAjBvB,EAAoB,CAApBA;AACA;;AAED,SAASwB,eAAT,CAAyBxB,SAAzB,EAAoCE,QAApC,EAA8C;AAAA,MACrCY,cADqC,GAClBZ,QADkB,CACrCY,cADqC;AAE7C,SAAOf,aAAaC,SAAbD,EAAwB,UAACG,QAAD,EAAc;AAC5C,QAAIA,SAASY,cAATZ,KAA4BY,cAAhC,EAAgD;AAC/C,aAAO,CAAP;AADD,WAEO,IAAIZ,SAASY,cAATZ,GAA0BY,cAA9B,EAA8C;AACpD,aAAO,CAAP;AADM,WAEA;AACN,aAAO,CAAC,CAAR;AACA;AAPK,IAAP;AASA","names":["requestAnimationFrame","binarySearch","instances","add","instance","wasIdle","length","start","stop","remove","_this","forceUpdate","updateInstance","tick","now","Date","nextUpdateTime","scheduleNextTick","scheduledTick","_this2","cancel","_updateInstance","getNextValue","value","setValue","i","findTargetIndex","splice","indexOf"],"sources":["E:\\courses\\my_personal_file\\node_modules\\react-time-ago\\source\\Updater.js"],"sourcesContent":["// Manages the updates of all `<ReactTimeAgo/>` elements on a page.\r\n\r\n// The reasons for going with `requestAnimationFrame()`:\r\n// * `requestAnimationFrame` won't be called when a tab is in background.\r\n// * Chrome has bugs when handling `setTimeout()`: https://www.npmjs.com/package/request-animation-frame-timeout\r\n\r\n// `requestAnimationFrame()` polyfill for old browsers.\r\nimport requestAnimationFrame from 'raf'\r\n\r\nimport binarySearch from './helpers/binarySearch'\r\n\r\nexport default {\r\n\tinstances: [],\r\n\tadd(instance) {\r\n\t\tconst wasIdle = this.instances.length === 0\r\n\t\tadd(this.instances, instance)\r\n\t\tif (wasIdle) {\r\n\t\t\tthis.start()\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstop: () => {\r\n\t\t\t\tremove(this.instances, instance)\r\n\t\t\t\tif (this.instances.length === 0) {\r\n\t\t\t\t\tthis.stop()\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tforceUpdate: () => {\r\n\t\t\t\tupdateInstance(instance, this.instances)\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\ttick() {\r\n\t\tconst now = Date.now()\r\n\t\twhile (true) {\r\n\t\t\tconst instance = this.instances[0]\r\n\t\t\tif (now >= instance.nextUpdateTime) {\r\n\t\t\t\tupdateInstance(instance, this.instances)\r\n\t\t\t} else {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tscheduleNextTick() {\r\n\t\tthis.scheduledTick = requestAnimationFrame(() => {\r\n\t\t\tthis.tick()\r\n\t\t\tthis.scheduleNextTick()\r\n\t\t})\r\n\t},\r\n\tstart() {\r\n\t\tthis.scheduleNextTick()\r\n\t},\r\n\tstop() {\r\n\t\trequestAnimationFrame.cancel(this.scheduledTick)\r\n\t}\r\n}\r\n\r\nfunction _updateInstance(instance) {\r\n\tconst [value, nextUpdateTime] = instance.getNextValue()\r\n\tinstance.setValue(value)\r\n\tinstance.nextUpdateTime = nextUpdateTime\r\n}\r\n\r\nfunction updateInstance(instance, instances) {\r\n\t_updateInstance(instance)\r\n\tremove(instances, instance)\r\n\tadd(instances, instance)\r\n}\r\n\r\nfunction add(instances, instance) {\r\n\tconst i = findTargetIndex(instances, instance)\r\n\tinstances.splice(i, 0, instance)\r\n}\r\n\r\nfunction remove(instances, instance) {\r\n\tconst i = instances.indexOf(instance)\r\n\tinstances.splice(i, 1)\t\r\n}\r\n\r\nfunction findTargetIndex(instances, instance) {\r\n\tconst { nextUpdateTime } = instance\r\n\treturn binarySearch(instances, (instance) => {\r\n\t\tif (instance.nextUpdateTime === nextUpdateTime) {\r\n\t\t\treturn 0\r\n\t\t} else if (instance.nextUpdateTime > nextUpdateTime) {\r\n\t\t\treturn 1\r\n\t\t} else {\r\n\t\t\treturn -1\r\n\t\t}\r\n\t})\r\n}"]},"metadata":{},"sourceType":"module"}