{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useRef } from \"react\";\nimport Delete from \"./Delete\";\nimport Edit from \"./Edit\";\nimport Info from \"./Info\";\nimport Replies from \"./Replies\";\nimport Reply from \"./Reply\";\nimport Scores from \"./Scores\";\nimport NewComment from \"./NewComment\";\nimport Update from \"./Update\";\nimport { handleReply, handleReplyActive, handleEditComment, handleUpdateComment } from \"../utils\";\nimport DeleteModal from \"./DeleteModal\";\nexport default function Comment(_ref) {\n  _s();\n\n  let {\n    comment,\n    currentUser\n  } = _ref;\n  const [text, setText] = useState(comment.content);\n  const [replyComment, setReplyComment] = useState(false);\n  const [update, setUpdate] = useState(false);\n  const textRef = useRef();\n\n  const handleText = e => {\n    setText(e.target.value);\n  }; // return (\n  // <>\n  //   <div>\n  //     <div className=\"comment\">\n  //       <div className=\"comment-scores\">\n  //         <Scores\n  //           score={comment.score}\n  //           currentUser={currentUser}\n  //           commentId={comment._id}\n  //         />\n  //       </div>\n  //       <div className=\"comment-info\">\n  //         <div className=\"comment-controllers\">\n  //           {currentUser.username === comment.user.username ? (\n  //             <div className=\"info\">\n  //               <Info\n  //                 profileUser=\"you\"\n  //                 user={comment.user}\n  //                 createdAt={comment.createdAt}\n  //               />\n  //             </div>\n  //           ) : (\n  //             <div className=\"info\">\n  //               <Info\n  //                 profileUser=\"user\"\n  //                 user={comment.user}\n  //                 createdAt={comment.createdAt}\n  //               />\n  //             </div>\n  //           )}\n  //           {currentUser.username === comment.user.username ? (\n  //             <div className=\"comment-delete\">\n  //               <Delete />\n  //               <Edit\n  //                 handleEditComment={() => {\n  //                   handleEditComment(textRef, setUpdate);\n  //                 }}\n  //               />\n  //             </div>\n  //           ) : (\n  //             <div className=\"comment-reply\">\n  //               <Reply handleReply={() => handleReply(setReplyComment)} />\n  //             </div>\n  //           )}\n  //         </div>\n  //         <div className=\"text\">\n  //           <textarea\n  //             name=\"comment\"\n  //             value={text}\n  //             readOnly={true}\n  //             onChange={handleText}\n  //             ref={textRef}\n  //           />\n  //           <div className=\"invisible\">{text}</div>\n  //         </div>\n  //         {update && (\n  //           <div className=\"comment-update\">\n  //             <Update\n  //               handleUpdateComment={() =>\n  //                 handleUpdateComment(comment, currentUser, text)\n  //               }\n  //             />\n  //           </div>\n  //         )}\n  //       </div>\n  //     </div>\n  //     {replyComment && (\n  //       <NewComment\n  //         currentUser={currentUser}\n  //         handleReplyActive={(txt) => {\n  //           handleReplyActive(setReplyComment, txt, comment, currentUser);\n  //         }}\n  //         reply\n  //       />\n  //     )}\n  //     <div className=\"comment-replies\">\n  //       {comment.replies.map((reply) => (\n  //         <Replies\n  //           currentUser={currentUser}\n  //           commentUser={comment.user.username}\n  //           reply={reply}\n  //           key={reply.id || reply._id}\n  //           comment={comment}\n  //           handleReplyActive={(txt) => {\n  //             handleReplyActive(setReplyComment, txt);\n  //           }}\n  //         />\n  //       ))}\n  //     </div>\n  //   </div>\n  // </>\n  // );\n\n}\n\n_s(Comment, \"A379HqyJMsPyxaNPvnrwM8APXBY=\");\n\n_c = Comment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"sources":["E:/courses/my_personal_file/challenges/comments-section/client/src/components/Comment.js"],"names":["useState","useRef","Delete","Edit","Info","Replies","Reply","Scores","NewComment","Update","handleReply","handleReplyActive","handleEditComment","handleUpdateComment","DeleteModal","Comment","comment","currentUser","text","setText","content","replyComment","setReplyComment","update","setUpdate","textRef","handleText","e","target","value"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SACEC,WADF,EAEEC,iBAFF,EAGEC,iBAHF,EAIEC,mBAJF,QAKO,UALP;AAMA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,SAASC,OAAT,OAA2C;AAAA;;AAAA,MAA1B;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAA0B;AACxD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAACgB,OAAO,CAACI,OAAT,CAAhC;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCtB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACuB,MAAD,EAASC,SAAT,IAAsBxB,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAMyB,OAAO,GAAGxB,MAAM,EAAtB;;AAEA,QAAMyB,UAAU,GAAIC,CAAD,IAAO;AACxBR,IAAAA,OAAO,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACD,GAFD,CAPwD,CAWxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;;GAxGuBd,O;;KAAAA,O","sourcesContent":["import { useState, useRef } from \"react\";\r\nimport Delete from \"./Delete\";\r\nimport Edit from \"./Edit\";\r\nimport Info from \"./Info\";\r\nimport Replies from \"./Replies\";\r\nimport Reply from \"./Reply\";\r\nimport Scores from \"./Scores\";\r\nimport NewComment from \"./NewComment\";\r\nimport Update from \"./Update\";\r\nimport {\r\n  handleReply,\r\n  handleReplyActive,\r\n  handleEditComment,\r\n  handleUpdateComment,\r\n} from \"../utils\";\r\nimport DeleteModal from \"./DeleteModal\";\r\n\r\nexport default function Comment({ comment, currentUser }) {\r\n  const [text, setText] = useState(comment.content);\r\n  const [replyComment, setReplyComment] = useState(false);\r\n  const [update, setUpdate] = useState(false);\r\n\r\n  const textRef = useRef();\r\n\r\n  const handleText = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n\r\n  // return (\r\n  // <>\r\n  //   <div>\r\n  //     <div className=\"comment\">\r\n  //       <div className=\"comment-scores\">\r\n  //         <Scores\r\n  //           score={comment.score}\r\n  //           currentUser={currentUser}\r\n  //           commentId={comment._id}\r\n  //         />\r\n  //       </div>\r\n  //       <div className=\"comment-info\">\r\n  //         <div className=\"comment-controllers\">\r\n  //           {currentUser.username === comment.user.username ? (\r\n  //             <div className=\"info\">\r\n  //               <Info\r\n  //                 profileUser=\"you\"\r\n  //                 user={comment.user}\r\n  //                 createdAt={comment.createdAt}\r\n  //               />\r\n  //             </div>\r\n  //           ) : (\r\n  //             <div className=\"info\">\r\n  //               <Info\r\n  //                 profileUser=\"user\"\r\n  //                 user={comment.user}\r\n  //                 createdAt={comment.createdAt}\r\n  //               />\r\n  //             </div>\r\n  //           )}\r\n\r\n  //           {currentUser.username === comment.user.username ? (\r\n  //             <div className=\"comment-delete\">\r\n  //               <Delete />\r\n  //               <Edit\r\n  //                 handleEditComment={() => {\r\n  //                   handleEditComment(textRef, setUpdate);\r\n  //                 }}\r\n  //               />\r\n  //             </div>\r\n  //           ) : (\r\n  //             <div className=\"comment-reply\">\r\n  //               <Reply handleReply={() => handleReply(setReplyComment)} />\r\n  //             </div>\r\n  //           )}\r\n  //         </div>\r\n  //         <div className=\"text\">\r\n  //           <textarea\r\n  //             name=\"comment\"\r\n  //             value={text}\r\n  //             readOnly={true}\r\n  //             onChange={handleText}\r\n  //             ref={textRef}\r\n  //           />\r\n  //           <div className=\"invisible\">{text}</div>\r\n  //         </div>\r\n  //         {update && (\r\n  //           <div className=\"comment-update\">\r\n  //             <Update\r\n  //               handleUpdateComment={() =>\r\n  //                 handleUpdateComment(comment, currentUser, text)\r\n  //               }\r\n  //             />\r\n  //           </div>\r\n  //         )}\r\n  //       </div>\r\n  //     </div>\r\n  //     {replyComment && (\r\n  //       <NewComment\r\n  //         currentUser={currentUser}\r\n  //         handleReplyActive={(txt) => {\r\n  //           handleReplyActive(setReplyComment, txt, comment, currentUser);\r\n  //         }}\r\n  //         reply\r\n  //       />\r\n  //     )}\r\n  //     <div className=\"comment-replies\">\r\n  //       {comment.replies.map((reply) => (\r\n  //         <Replies\r\n  //           currentUser={currentUser}\r\n  //           commentUser={comment.user.username}\r\n  //           reply={reply}\r\n  //           key={reply.id || reply._id}\r\n  //           comment={comment}\r\n  //           handleReplyActive={(txt) => {\r\n  //             handleReplyActive(setReplyComment, txt);\r\n  //           }}\r\n  //         />\r\n  //       ))}\r\n  //     </div>\r\n  //   </div>\r\n  // </>\r\n  // );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}