{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\r\n * Whether can use `Intl.DateTimeFormat` for these `locales`.\r\n * Returns the first suitable one.\r\n * @param  {(string|string[])} locales\r\n * @return {?string} The first locale that can be used.\r\n */\n\n\nexport function intlDateTimeFormatSupportedLocale(locales) {\n  /* istanbul ignore else */\n  if (intlDateTimeFormatSupported()) {\n    return Intl.DateTimeFormat.supportedLocalesOf(locales)[0];\n  }\n}\n/**\r\n * Whether can use `Intl.DateTimeFormat`.\r\n * @return {boolean}\r\n */\n\nexport function intlDateTimeFormatSupported() {\n  // Babel transforms `typeof` into some \"branches\"\n  // so istanbul will show this as \"branch not covered\".\n\n  /* istanbul ignore next */\n  var isIntlAvailable = (typeof Intl === 'undefined' ? 'undefined' : _typeof(Intl)) === 'object';\n  return isIntlAvailable && typeof Intl.DateTimeFormat === 'function';\n}","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;AAMA,OAAO,SAASA,iCAAT,CAA2CC,OAA3C,EAAoD;AAC1D;AACA,MAAIC,6BAAJ,EAAmC;AAClC,WAAOC,KAAKC,cAALD,CAAoBE,kBAApBF,CAAuCF,OAAvCE,EAAgD,CAAhDA,CAAP;AACA;AACD;AAED;;;;;AAIA,OAAO,SAASD,2BAAT,GAAuC;AAC7C;AACA;;AACA;AACA,MAAMI,kBAAkB,QAAOH,IAAP,yCAAOA,IAAP,OAAgB,QAAxC;AACA,SAAOG,mBAAmB,OAAOH,KAAKC,cAAZ,KAA+B,UAAzD;AACA","names":["intlDateTimeFormatSupportedLocale","locales","intlDateTimeFormatSupported","Intl","DateTimeFormat","supportedLocalesOf","isIntlAvailable"],"sources":["E:\\courses\\my_personal_file\\node_modules\\react-time-ago\\source\\helpers\\locale.js"],"sourcesContent":["/**\r\n * Whether can use `Intl.DateTimeFormat` for these `locales`.\r\n * Returns the first suitable one.\r\n * @param  {(string|string[])} locales\r\n * @return {?string} The first locale that can be used.\r\n */\r\nexport function intlDateTimeFormatSupportedLocale(locales) {\r\n\t/* istanbul ignore else */\r\n\tif (intlDateTimeFormatSupported()) {\r\n\t\treturn Intl.DateTimeFormat.supportedLocalesOf(locales)[0]\r\n\t}\r\n}\r\n\r\n/**\r\n * Whether can use `Intl.DateTimeFormat`.\r\n * @return {boolean}\r\n */\r\nexport function intlDateTimeFormatSupported() {\r\n\t// Babel transforms `typeof` into some \"branches\"\r\n\t// so istanbul will show this as \"branch not covered\".\r\n\t/* istanbul ignore next */\r\n\tconst isIntlAvailable = typeof Intl === 'object'\r\n\treturn isIntlAvailable && typeof Intl.DateTimeFormat === 'function'\r\n}\r\n"]},"metadata":{},"sourceType":"module"}