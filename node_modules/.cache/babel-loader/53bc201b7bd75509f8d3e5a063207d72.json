{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport TimeAgo from 'javascript-time-ago';\nimport getVerboseDateFormatter from './helpers/getVerboseDateFormatter';\nimport { getDate } from './helpers/date';\nimport getTimeAgo from './helpers/getTimeAgo';\nimport Updater from './Updater';\nimport Time from './Time';\nimport { style as styleType } from './PropTypes';\n\nfunction ReactTimeAgo(_ref) {\n  var date = _ref.date,\n      future = _ref.future,\n      timeStyle = _ref.timeStyle,\n      round = _ref.round,\n      minTimeLeft = _ref.minTimeLeft,\n      tooltip = _ref.tooltip,\n      Component = _ref.component,\n      container = _ref.container,\n      wrapperComponent = _ref.wrapperComponent,\n      wrapperProps = _ref.wrapperProps,\n      locale = _ref.locale,\n      locales = _ref.locales,\n      formatVerboseDate = _ref.formatVerboseDate,\n      verboseDateFormat = _ref.verboseDateFormat,\n      updateInterval = _ref.updateInterval,\n      tick = _ref.tick,\n      nowProperty = _ref.now,\n      timeOffset = _ref.timeOffset,\n      polyfill = _ref.polyfill,\n      rest = _objectWithoutProperties(_ref, ['date', 'future', 'timeStyle', 'round', 'minTimeLeft', 'tooltip', 'component', 'container', 'wrapperComponent', 'wrapperProps', 'locale', 'locales', 'formatVerboseDate', 'verboseDateFormat', 'updateInterval', 'tick', 'now', 'timeOffset', 'polyfill']); // Get the list of preferred locales.\n\n\n  var preferredLocales = useMemo(function () {\n    // Convert `locale` to `locales`.\n    if (locale) {\n      locales = [locale];\n    } // Add `javascript-time-ago` default locale.\n\n\n    return locales.concat(TimeAgo.getDefaultLocale());\n  }, [locale, locales]); // Create `javascript-time-ago` formatter instance.\n\n  var timeAgo = useMemo(function () {\n    return getTimeAgo(preferredLocales, {\n      polyfill: polyfill\n    });\n  }, [preferredLocales, polyfill]); // The date or timestamp that was passed.\n  // Convert timestamp to `Date`.\n\n  date = useMemo(function () {\n    return getDate(date);\n  }, [date]); // Formats the `date`.\n\n  var formatDate = useCallback(function () {\n    var now = (nowProperty || Date.now()) - timeOffset;\n    var stopUpdates = void 0;\n\n    if (future) {\n      if (now >= date.getTime()) {\n        now = date.getTime();\n        stopUpdates = true;\n      }\n    }\n\n    if (minTimeLeft !== undefined) {\n      var maxNow = date.getTime() - minTimeLeft * 1000;\n\n      if (now > maxNow) {\n        now = maxNow;\n        stopUpdates = true;\n      }\n    }\n\n    var _timeAgo$format = timeAgo.format(date, timeStyle, {\n      getTimeToNextUpdate: true,\n      now: now,\n      future: future,\n      round: round\n    }),\n        _timeAgo$format2 = _slicedToArray(_timeAgo$format, 2),\n        formattedDate = _timeAgo$format2[0],\n        timeToNextUpdate = _timeAgo$format2[1];\n\n    if (stopUpdates) {\n      timeToNextUpdate = INFINITY;\n    } else {\n      // Legacy compatibility: there used to be an `updateInterval` property.\n      // That was before `getTimeToNextUpdate` feature was introduced in `javascript-time-ago`.\n      // A default interval of one minute is introduced because\n      // `getTimeToNextUpdate` feature may theoretically return `undefined`.\n      timeToNextUpdate = updateInterval || timeToNextUpdate || 60 * 1000; // A minute by default.\n    }\n\n    return [formattedDate, now + timeToNextUpdate];\n  }, [date, future, timeStyle, updateInterval, round, minTimeLeft, timeAgo, nowProperty]);\n  var formatDateRef = useRef();\n  formatDateRef.current = formatDate;\n\n  var _useMemo = useMemo(formatDate, []),\n      _useMemo2 = _slicedToArray(_useMemo, 2),\n      _formattedDate = _useMemo2[0],\n      _nextUpdateTime = _useMemo2[1];\n\n  var _useState = useState(_formattedDate),\n      _useState2 = _slicedToArray(_useState, 2),\n      formattedDate = _useState2[0],\n      setFormattedDate = _useState2[1];\n\n  var updater = useRef();\n  useEffect(function () {\n    if (tick) {\n      updater.current = Updater.add({\n        getNextValue: function getNextValue() {\n          return formatDateRef.current();\n        },\n        setValue: setFormattedDate,\n        nextUpdateTime: _nextUpdateTime\n      });\n      return function () {\n        return updater.current.stop();\n      };\n    }\n  }, [tick]);\n  useEffect(function () {\n    if (updater.current) {\n      updater.current.forceUpdate();\n    } else {\n      var _formatDate = formatDate(),\n          _formatDate2 = _slicedToArray(_formatDate, 1),\n          _formattedDate2 = _formatDate2[0];\n\n      setFormattedDate(_formattedDate2);\n    }\n  }, [formatDate]); // Create verbose date formatter for the tooltip text.\n\n  var verboseDateFormatter = useMemo(function () {\n    return getVerboseDateFormatter(preferredLocales, verboseDateFormat);\n  }, [preferredLocales, verboseDateFormat]); // Format verbose date for the tooltip.\n\n  var verboseDate = useMemo(function () {\n    if (formatVerboseDate) {\n      return formatVerboseDate(date);\n    }\n\n    return verboseDateFormatter(date);\n  }, [date, formatVerboseDate, verboseDateFormatter]);\n  var result = React.createElement(Component, _extends({\n    date: date,\n    verboseDate: verboseDate,\n    tooltip: tooltip\n  }, rest), formattedDate);\n  var WrapperComponent = wrapperComponent || container;\n\n  if (WrapperComponent) {\n    return React.createElement(WrapperComponent, _extends({}, wrapperProps, {\n      verboseDate: verboseDate\n    }), result);\n  }\n\n  return result;\n}\n\nReactTimeAgo.propTypes = {\n  // The `date` or `timestamp`.\n  // E.g. `new Date()` or `1355972400000`.\n  date: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.number]).isRequired,\n  // Preferred locale.\n  // Is 'en' by default.\n  // E.g. 'ru-RU'.\n  locale: PropTypes.string,\n  // Alternatively to `locale`, one could pass `locales`:\n  // A list of preferred locales (ordered).\n  // Will choose the first supported locale from the list.\n  // E.g. `['ru-RU', 'en-GB']`.\n  locales: PropTypes.arrayOf(PropTypes.string),\n  // If set to `true`, then will stop at \"zero point\"\n  // when going from future dates to past dates.\n  // In other words, even if the `date` has passed,\n  // it will still render as if `date` is `now`.\n  future: PropTypes.bool,\n  // Date/time formatting style.\n  // See `javascript-time-ago` docs on \"Styles\" for more info.\n  // E.g. 'round', 'round-minute', 'twitter', 'twitter-first-minute'.\n  timeStyle: styleType,\n  // `round` parameter of `javascript-time-ago`.\n  // See `javascript-time-ago` docs on \"Rounding\" for more info.\n  // Examples: \"round\", \"floor\".\n  round: PropTypes.string,\n  // If specified, the time won't \"tick\" past this threshold (in seconds).\n  // For example, if `minTimeLeft` is `60 * 60`\n  // then the time won't \"tick\" past \"in 1 hour\".\n  minTimeLeft: PropTypes.number,\n  // A React component to render the relative time label.\n  // Receives properties:\n  // * date: Date — The date.\n  // * verboseDate: string — Formatted verbose date.\n  // * tooltip: boolean — The `tooltip` property of `<ReactTimeAgo/>` component.\n  // * children: string — The relative time label.\n  // * All \"unknown\" properties that have been passed to `<ReactTimeAgo/>` are passed through to this component.\n  component: PropTypes.elementType.isRequired,\n  // Whether to use HTML `tooltip` attribute to show a verbose date tooltip.\n  // Is `true` by default.\n  // Can be set to `false` to disable the native HTML `tooltip`.\n  tooltip: PropTypes.bool.isRequired,\n  // Verbose date formatter.\n  // By default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`.\n  formatVerboseDate: PropTypes.func,\n  // `Intl.DateTimeFormat` format for formatting verbose date.\n  // See `Intl.DateTimeFormat` docs for more info.\n  verboseDateFormat: PropTypes.object,\n  // (deprecated)\n  // How often the component refreshes itself.\n  // Instead, consider using `getNextTimeToUpdate()` feature\n  // of `javascript-time-ago` styles.\n  updateInterval: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.shape({\n    threshold: PropTypes.number,\n    interval: PropTypes.number.isRequired\n  }))]),\n  // (deprecated).\n  // Set to `false` to disable automatic refresh of the component.\n  // Is `true` by default.\n  // I guess no one actually turns that off.\n  tick: PropTypes.bool,\n  // Allows setting a custom baseline for relative time measurement.\n  // https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\n  now: PropTypes.number,\n  // Allows offsetting the `date` by an arbitrary amount of milliseconds.\n  // https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\n  timeOffset: PropTypes.number,\n  // Pass `false` to use native `Intl.RelativeTimeFormat` / `Intl.PluralRules`\n  // instead of the polyfilled ones in `javascript-time-ago`.\n  polyfill: PropTypes.bool,\n  // (advanced)\n  // A React Component to wrap the resulting `<time/>` React Element.\n  // Receives `verboseDate` and `children` properties.\n  // Also receives `wrapperProps`, if they're passed.\n  // `verboseDate` can be used for displaying verbose date label\n  // in an \"on mouse over\" (or \"on touch\") tooltip.\n  // See the \"Tooltip\" readme section for more info.\n  // Another example could be having `wrapperComponent`\n  // being rerendered every time the component refreshes itself.\n  wrapperComponent: PropTypes.elementType,\n  // Custom `props` passed to `wrapperComponent`.\n  wrapperProps: PropTypes.object\n};\nReactTimeAgo.defaultProps = {\n  // No preferred locales.\n  locales: [],\n  // Use a `<time/>` tag by default.\n  component: Time,\n  // Use HTML `tooltip` attribute to show a verbose date tooltip.\n  tooltip: true,\n  // `Intl.DateTimeFormat` for verbose date.\n  // Example: \"Thursday, December 20, 2012, 7:00:00 AM GMT+4\"\n  verboseDateFormat: {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    second: '2-digit' // timeZoneName: 'short'\n\n  },\n  // Automatically refreshes itself.\n  tick: true,\n  // No time offset.\n  timeOffset: 0 // The component schedules a next refresh every time it renders.\n  // There's no need to rerender this component unless its props change.\n\n};\nReactTimeAgo = React.memo(ReactTimeAgo);\nexport default ReactTimeAgo; // A thousand years is practically a metaphor for \"infinity\"\n// in the context of this component.\n\nvar YEAR = 365 * 24 * 60 * 60 * 1000;\nvar INFINITY = 1000 * YEAR;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,EAA6CC,WAA7C,EAA0DC,OAA1D,QAAyE,OAAzE;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAEA,OAAOC,uBAAP,MAAoC,mCAApC;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,SAASC,SAASC,SAAlB,QAAmC,aAAnC;;AAEA,SAASC,YAAT,OAuBG;AAAA,MAtBFC,IAsBE,QAtBFA,IAsBE;AAAA,MArBFC,MAqBE,QArBFA,MAqBE;AAAA,MApBFC,SAoBE,QApBFA,SAoBE;AAAA,MAnBFC,KAmBE,QAnBFA,KAmBE;AAAA,MAlBFC,WAkBE,QAlBFA,WAkBE;AAAA,MAjBFC,OAiBE,QAjBFA,OAiBE;AAAA,MAhBSC,SAgBT,QAhBFC,SAgBE;AAAA,MAbFC,SAaE,QAbFA,SAaE;AAAA,MAZFC,gBAYE,QAZFA,gBAYE;AAAA,MAXFC,YAWE,QAXFA,YAWE;AAAA,MAVFC,MAUE,QAVFA,MAUE;AAAA,MATFC,OASE,QATFA,OASE;AAAA,MARFC,iBAQE,QARFA,iBAQE;AAAA,MAPFC,iBAOE,QAPFA,iBAOE;AAAA,MANFC,cAME,QANFA,cAME;AAAA,MALFC,IAKE,QALFA,IAKE;AAAA,MAJGC,WAIH,QAJFC,GAIE;AAAA,MAHFC,UAGE,QAHFA,UAGE;AAAA,MAFFC,QAEE,QAFFA,QAEE;AAAA,MADCC,IACD,+RACF;;;AACA,MAAMC,mBAAmBjC,QAAQ,YAAM;AACtC;AACA,QAAIsB,MAAJ,EAAY;AACXC,gBAAU,CAACD,MAAD,CAAVC;AACA,KAJqC,CAKtC;;;AACA,WAAOA,QAAQW,MAARX,CAAerB,QAAQiC,gBAARjC,EAAfqB,CAAP;AANwB,KAOtB,CACFD,MADE,EAEFC,OAFE,CAPsBvB,CAAzB,CAFE,CAcF;;AACA,MAAMoC,UAAUpC,QAAQ,YAAM;AAC7B,WAAOK,WAAW4B,gBAAX5B,EAA6B;AAAE0B;AAAF,KAA7B1B,CAAP;AADe,KAEb,CACF4B,gBADE,EAEFF,QAFE,CAFa/B,CAAhB,CAfE,CAsBF;AACA;;AACAW,SAAOX,QAAQ;AAAA,WAAMI,QAAQO,IAARP,CAAN;AAAR,KAA6B,CAACO,IAAD,CAA7BX,CAAPW,CAxBE,CA0BF;;AACA,MAAM0B,aAAatC,YAAY,YAAM;AACpC,QAAI8B,MAAM,CAACD,eAAeU,KAAKT,GAALS,EAAhB,IAA8BR,UAAxC;AACA,QAAIS,oBAAJ;;AACA,QAAI3B,MAAJ,EAAY;AACX,UAAIiB,OAAOlB,KAAK6B,OAAL7B,EAAX,EAA2B;AAC1BkB,cAAMlB,KAAK6B,OAAL7B,EAANkB;AACAU,sBAAc,IAAdA;AACA;AACD;;AACD,QAAIxB,gBAAgB0B,SAApB,EAA+B;AAC9B,UAAMC,SAAS/B,KAAK6B,OAAL7B,KAAiBI,cAAc,IAA9C;;AACA,UAAIc,MAAMa,MAAV,EAAkB;AACjBb,cAAMa,MAANb;AACAU,sBAAc,IAAdA;AACA;AACD;;AAfmC,0BAgBIH,QAAQO,MAARP,CAAezB,IAAfyB,EAAqBvB,SAArBuB,EAAgC;AACvEQ,2BAAqB,IADkD;AAEvEf,cAFuE;AAGvEjB,oBAHuE;AAIvEE;AAJuE,KAAhCsB,CAhBJ;AAAA;AAAA,QAgB/BS,aAhB+B;AAAA,QAgBhBC,gBAhBgB;;AAsBpC,QAAIP,WAAJ,EAAiB;AAChBO,yBAAmBC,QAAnBD;AADD,WAEO;AACN;AACA;AACA;AACA;AACAA,yBAAmBpB,kBAAkBoB,gBAAlBpB,IAAsC,KAAK,IAA9DoB,CALM,CAK6D;AACnE;;AACD,WAAO,CAACD,aAAD,EAAgBhB,MAAMiB,gBAAtB,CAAP;AA/BkB,KAgChB,CACFnC,IADE,EAEFC,MAFE,EAGFC,SAHE,EAIFa,cAJE,EAKFZ,KALE,EAMFC,WANE,EAOFqB,OAPE,EAQFR,WARE,CAhCgB7B,CAAnB;AA2CA,MAAMiD,gBAAgBlD,QAAtB;AACAkD,gBAAcC,OAAdD,GAAwBX,UAAxBW;;AAvEE,iBAyEwChD,QAAQqC,UAARrC,EAAoB,EAApBA,CAzExC;AAAA;AAAA,MAyEKkD,cAzEL;AAAA,MAyEqBC,eAzErB;;AAAA,kBA0EwCtD,SAASqD,cAATrD,CA1ExC;AAAA;AAAA,MA0EKgD,aA1EL;AAAA,MA0EoBO,gBA1EpB;;AA4EF,MAAMC,UAAUvD,QAAhB;AAEAF,YAAU,YAAM;AACf,QAAI+B,IAAJ,EAAU;AACT0B,cAAQJ,OAARI,GAAkB/C,QAAQgD,GAARhD,CAAY;AAC7BiD,sBAAc;AAAA,iBAAMP,cAAcC,OAAdD,EAAN;AADe;AAE7BQ,kBAAUJ,gBAFmB;AAG7BK,wBAAgBN;AAHa,OAAZ7C,CAAlB+C;AAKA,aAAO;AAAA,eAAMA,QAAQJ,OAARI,CAAgBK,IAAhBL,EAAN;AAAP;AACA;AARF,KASG,CAAC1B,IAAD,CATH/B;AAWAA,YAAU,YAAM;AACf,QAAIyD,QAAQJ,OAAZ,EAAqB;AACpBI,cAAQJ,OAARI,CAAgBM,WAAhBN;AADD,WAEO;AAAA,wBACkBhB,YADlB;AAAA;AAAA,UACCQ,eADD;;AAENO,uBAAiBP,eAAjBO;AACA;AANF,KAOG,CAACf,UAAD,CAPHzC,EAzFE,CAkGF;;AACA,MAAMgE,uBAAuB5D,QAAQ,YAAM;AAC1C,WAAOG,wBACN8B,gBADM9B,EAENsB,iBAFMtB,CAAP;AAD4B,KAK1B,CACF8B,gBADE,EAEFR,iBAFE,CAL0BzB,CAA7B,CAnGE,CA6GF;;AACA,MAAM6D,cAAc7D,QAAQ,YAAM;AACjC,QAAIwB,iBAAJ,EAAuB;AACtB,aAAOA,kBAAkBb,IAAlBa,CAAP;AACA;;AACD,WAAOoC,qBAAqBjD,IAArBiD,CAAP;AAJmB,KAKjB,CACFjD,IADE,EAEFa,iBAFE,EAGFoC,oBAHE,CALiB5D,CAApB;AAWA,MAAM8D,SACLnE,oBAACsB,SAAD;AACCN,UAAMA,IADP;AAECkD,iBAAaA,WAFd;AAGC7C,aAASA;AAHV,KAIKgB,IAJL,GAKEa,aALF,CADD;AAUA,MAAMkB,mBAAmB3C,oBAAoBD,SAA7C;;AAEA,MAAI4C,gBAAJ,EAAsB;AACrB,WACCpE,oBAACoE,gBAAD,eACK1C,YADL;AAECwC,mBAAaA;AAFd,QAGEC,MAHF,CADD;AAOA;;AAED,SAAOA,MAAP;AACA;;AAEDpD,aAAasD,SAAbtD,GAAyB;AACxB;AACA;AACAC,QAAMV,UAAUgE,SAAVhE,CAAoB,CACzBA,UAAUiE,UAAVjE,CAAqBqC,IAArBrC,CADyB,EAEzBA,UAAUkE,MAFe,CAApBlE,EAGHmE,UANqB;AAQxB;AACA;AACA;AACA9C,UAAQrB,UAAUoE,MAXM;AAaxB;AACA;AACA;AACA;AACA9C,WAAStB,UAAUqE,OAAVrE,CAAkBA,UAAUoE,MAA5BpE,CAjBe;AAmBxB;AACA;AACA;AACA;AACAW,UAAQX,UAAUsE,IAvBM;AAyBxB;AACA;AACA;AACA1D,aAAWJ,SA5Ba;AA8BxB;AACA;AACA;AACAK,SAAOb,UAAUoE,MAjCO;AAmCxB;AACA;AACA;AACAtD,eAAad,UAAUkE,MAtCC;AAwCxB;AACA;AACA;AACA;AACA;AACA;AACA;AACAjD,aAAWjB,UAAUuE,WAAVvE,CAAsBmE,UA/CT;AAiDxB;AACA;AACA;AACApD,WAASf,UAAUsE,IAAVtE,CAAemE,UApDA;AAsDxB;AACA;AACA5C,qBAAmBvB,UAAUwE,IAxDL;AA0DxB;AACA;AACAhD,qBAAmBxB,UAAUyE,MA5DL;AA8DxB;AACA;AACA;AACA;AACAhD,kBAAgBzB,UAAUgE,SAAVhE,CAAoB,CACnCA,UAAUkE,MADyB,EAEnClE,UAAUqE,OAAVrE,CAAkBA,UAAU0E,KAAV1E,CAAgB;AACjC2E,eAAW3E,UAAUkE,MADY;AAEjCU,cAAU5E,UAAUkE,MAAVlE,CAAiBmE;AAFM,GAAhBnE,CAAlBA,CAFmC,CAApBA,CAlEQ;AA0ExB;AACA;AACA;AACA;AACA0B,QAAM1B,UAAUsE,IA9EQ;AAgFxB;AACA;AACA1C,OAAK5B,UAAUkE,MAlFS;AAoFxB;AACA;AACArC,cAAY7B,UAAUkE,MAtFE;AAwFxB;AACA;AACApC,YAAU9B,UAAUsE,IA1FI;AA4FxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnD,oBAAkBnB,UAAUuE,WArGJ;AAuGxB;AACAnD,gBAAcpB,UAAUyE;AAxGA,CAAzBhE;AA2GAA,aAAaoE,YAAbpE,GAA4B;AAC3B;AACAa,WAAS,EAFkB;AAI3B;AACAL,aAAWX,IALgB;AAO3B;AACAS,WAAS,IARkB;AAU3B;AACA;AACAS,qBAAmB;AAClBsD,aAAS,MADS;AAElBC,SAAK,SAFa;AAGlBC,WAAO,MAHW;AAIlBC,UAAM,SAJY;AAKlBC,UAAM,SALY;AAMlBC,YAAQ,SANU;AAOlBC,YAAQ,SAPU,CAQlB;;AARkB,GAZQ;AAuB3B;AACA1D,QAAM,IAxBqB;AA0B3B;AACAG,cAAY,CA3Be,CA8B5B;AACA;;AA/B4B,CAA5BpB;AAgCAA,eAAef,MAAM2F,IAAN3F,CAAWe,YAAXf,CAAfe;AAEA,eAAeA,YAAf,C,CAEA;AACA;;AACA,IAAM6E,OAAO,MAAM,EAAN,GAAW,EAAX,GAAgB,EAAhB,GAAqB,IAAlC;AACA,IAAMxC,WAAW,OAAOwC,IAAxB","names":["React","useEffect","useState","useRef","useCallback","useMemo","PropTypes","TimeAgo","getVerboseDateFormatter","getDate","getTimeAgo","Updater","Time","style","styleType","ReactTimeAgo","date","future","timeStyle","round","minTimeLeft","tooltip","Component","component","container","wrapperComponent","wrapperProps","locale","locales","formatVerboseDate","verboseDateFormat","updateInterval","tick","nowProperty","now","timeOffset","polyfill","rest","preferredLocales","concat","getDefaultLocale","timeAgo","formatDate","Date","stopUpdates","getTime","undefined","maxNow","format","getTimeToNextUpdate","formattedDate","timeToNextUpdate","INFINITY","formatDateRef","current","_formattedDate","_nextUpdateTime","setFormattedDate","updater","add","getNextValue","setValue","nextUpdateTime","stop","forceUpdate","verboseDateFormatter","verboseDate","result","WrapperComponent","propTypes","oneOfType","instanceOf","number","isRequired","string","arrayOf","bool","elementType","func","object","shape","threshold","interval","defaultProps","weekday","day","month","year","hour","minute","second","memo","YEAR"],"sources":["E:\\courses\\my_personal_file\\node_modules\\react-time-ago\\source\\ReactTimeAgo.js"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TimeAgo from 'javascript-time-ago'\r\n\r\nimport getVerboseDateFormatter from './helpers/getVerboseDateFormatter'\r\nimport { getDate } from './helpers/date'\r\nimport getTimeAgo from './helpers/getTimeAgo'\r\n\r\nimport Updater from './Updater'\r\nimport Time from './Time'\r\n\r\nimport { style as styleType } from './PropTypes'\r\n\r\nfunction ReactTimeAgo({\r\n\tdate,\r\n\tfuture,\r\n\ttimeStyle,\r\n\tround,\r\n\tminTimeLeft,\r\n\ttooltip,\r\n\tcomponent: Component,\r\n\t// `container` property name is deprecated, \r\n\t// use `wrapperComponent` property name instead.\r\n\tcontainer,\r\n\twrapperComponent,\r\n\twrapperProps,\r\n\tlocale,\r\n\tlocales,\r\n\tformatVerboseDate,\r\n\tverboseDateFormat,\r\n\tupdateInterval,\r\n\ttick,\r\n\tnow: nowProperty,\r\n\ttimeOffset,\r\n\tpolyfill,\r\n\t...rest\r\n}) {\r\n\t// Get the list of preferred locales.\r\n\tconst preferredLocales = useMemo(() => {\r\n\t\t// Convert `locale` to `locales`.\r\n\t\tif (locale) {\r\n\t\t\tlocales = [locale]\r\n\t\t}\r\n\t\t// Add `javascript-time-ago` default locale.\r\n\t\treturn locales.concat(TimeAgo.getDefaultLocale())\r\n\t}, [\r\n\t\tlocale,\r\n\t\tlocales\r\n\t])\r\n\r\n\t// Create `javascript-time-ago` formatter instance.\r\n\tconst timeAgo = useMemo(() => {\r\n\t\treturn getTimeAgo(preferredLocales, { polyfill })\r\n\t}, [\r\n\t\tpreferredLocales,\r\n\t\tpolyfill\r\n\t])\r\n\r\n\t// The date or timestamp that was passed.\r\n\t// Convert timestamp to `Date`.\r\n\tdate = useMemo(() => getDate(date), [date])\r\n\r\n\t// Formats the `date`.\r\n\tconst formatDate = useCallback(() => {\r\n\t\tlet now = (nowProperty || Date.now()) - timeOffset\r\n\t\tlet stopUpdates\r\n\t\tif (future) {\r\n\t\t\tif (now >= date.getTime()) {\r\n\t\t\t\tnow = date.getTime()\r\n\t\t\t\tstopUpdates = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (minTimeLeft !== undefined) {\r\n\t\t\tconst maxNow = date.getTime() - minTimeLeft * 1000\r\n\t\t\tif (now > maxNow) {\r\n\t\t\t\tnow = maxNow\r\n\t\t\t\tstopUpdates = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet [formattedDate, timeToNextUpdate] = timeAgo.format(date, timeStyle, {\r\n\t\t\tgetTimeToNextUpdate: true,\r\n\t\t\tnow,\r\n\t\t\tfuture,\r\n\t\t\tround\r\n\t\t})\r\n\t\tif (stopUpdates) {\r\n\t\t\ttimeToNextUpdate = INFINITY\r\n\t\t} else {\r\n\t\t\t// Legacy compatibility: there used to be an `updateInterval` property.\r\n\t\t\t// That was before `getTimeToNextUpdate` feature was introduced in `javascript-time-ago`.\r\n\t\t\t// A default interval of one minute is introduced because\r\n\t\t\t// `getTimeToNextUpdate` feature may theoretically return `undefined`.\r\n\t\t\ttimeToNextUpdate = updateInterval || timeToNextUpdate || 60 * 1000 // A minute by default.\r\n\t\t}\r\n\t\treturn [formattedDate, now + timeToNextUpdate]\r\n\t}, [\r\n\t\tdate,\r\n\t\tfuture,\r\n\t\ttimeStyle,\r\n\t\tupdateInterval,\r\n\t\tround,\r\n\t\tminTimeLeft,\r\n\t\ttimeAgo,\r\n\t\tnowProperty\r\n\t])\r\n\r\n\tconst formatDateRef = useRef()\r\n\tformatDateRef.current = formatDate\r\n\r\n\tconst [_formattedDate, _nextUpdateTime] = useMemo(formatDate, [])\r\n\tconst [formattedDate, setFormattedDate] = useState(_formattedDate)\r\n\r\n\tconst updater = useRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tif (tick) {\r\n\t\t\tupdater.current = Updater.add({\r\n\t\t\t\tgetNextValue: () => formatDateRef.current(),\r\n\t\t\t\tsetValue: setFormattedDate,\r\n\t\t\t\tnextUpdateTime: _nextUpdateTime\r\n\t\t\t})\r\n\t\t\treturn () => updater.current.stop()\r\n\t\t}\r\n\t}, [tick])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (updater.current) {\r\n\t\t\tupdater.current.forceUpdate()\r\n\t\t} else {\r\n\t\t\tconst [formattedDate] = formatDate()\r\n\t\t\tsetFormattedDate(formattedDate)\r\n\t\t}\r\n\t}, [formatDate])\r\n\r\n\t// Create verbose date formatter for the tooltip text.\r\n\tconst verboseDateFormatter = useMemo(() => {\r\n\t\treturn getVerboseDateFormatter(\r\n\t\t\tpreferredLocales, \r\n\t\t\tverboseDateFormat\r\n\t\t)\r\n\t}, [\r\n\t\tpreferredLocales,\r\n\t\tverboseDateFormat\r\n\t])\r\n\r\n\t// Format verbose date for the tooltip.\r\n\tconst verboseDate = useMemo(() => {\r\n\t\tif (formatVerboseDate) {\r\n\t\t\treturn formatVerboseDate(date)\r\n\t\t}\r\n\t\treturn verboseDateFormatter(date)\r\n\t}, [\r\n\t\tdate,\r\n\t\tformatVerboseDate,\r\n\t\tverboseDateFormatter\r\n\t])\r\n\r\n\tconst result = (\r\n\t\t<Component\r\n\t\t\tdate={date}\r\n\t\t\tverboseDate={verboseDate}\r\n\t\t\ttooltip={tooltip}\r\n\t\t\t{...rest}>\r\n\t\t\t{formattedDate}\r\n\t\t</Component>\r\n\t)\r\n\r\n\tconst WrapperComponent = wrapperComponent || container\r\n\r\n\tif (WrapperComponent) {\r\n\t\treturn (\r\n\t\t\t<WrapperComponent\r\n\t\t\t\t{...wrapperProps}\r\n\t\t\t\tverboseDate={verboseDate}>\r\n\t\t\t\t{result}\r\n\t\t\t</WrapperComponent>\r\n\t\t)\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\nReactTimeAgo.propTypes = {\r\n\t// The `date` or `timestamp`.\r\n\t// E.g. `new Date()` or `1355972400000`.\r\n\tdate: PropTypes.oneOfType([\r\n\t\tPropTypes.instanceOf(Date),\r\n\t\tPropTypes.number\r\n\t]).isRequired,\r\n\r\n\t// Preferred locale.\r\n\t// Is 'en' by default.\r\n\t// E.g. 'ru-RU'.\r\n\tlocale: PropTypes.string,\r\n\r\n\t// Alternatively to `locale`, one could pass `locales`:\r\n\t// A list of preferred locales (ordered).\r\n\t// Will choose the first supported locale from the list.\r\n\t// E.g. `['ru-RU', 'en-GB']`.\r\n\tlocales: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t// If set to `true`, then will stop at \"zero point\"\r\n\t// when going from future dates to past dates.\r\n\t// In other words, even if the `date` has passed,\r\n\t// it will still render as if `date` is `now`.\r\n\tfuture: PropTypes.bool,\r\n\r\n\t// Date/time formatting style.\r\n\t// See `javascript-time-ago` docs on \"Styles\" for more info.\r\n\t// E.g. 'round', 'round-minute', 'twitter', 'twitter-first-minute'.\r\n\ttimeStyle: styleType,\r\n\r\n\t// `round` parameter of `javascript-time-ago`.\r\n\t// See `javascript-time-ago` docs on \"Rounding\" for more info.\r\n\t// Examples: \"round\", \"floor\".\r\n\tround: PropTypes.string,\r\n\r\n\t// If specified, the time won't \"tick\" past this threshold (in seconds).\r\n\t// For example, if `minTimeLeft` is `60 * 60`\r\n\t// then the time won't \"tick\" past \"in 1 hour\".\r\n\tminTimeLeft: PropTypes.number,\r\n\r\n\t// A React component to render the relative time label.\r\n\t// Receives properties:\r\n\t// * date: Date — The date.\r\n\t// * verboseDate: string — Formatted verbose date.\r\n\t// * tooltip: boolean — The `tooltip` property of `<ReactTimeAgo/>` component.\r\n\t// * children: string — The relative time label.\r\n\t// * All \"unknown\" properties that have been passed to `<ReactTimeAgo/>` are passed through to this component.\r\n\tcomponent: PropTypes.elementType.isRequired,\r\n\r\n\t// Whether to use HTML `tooltip` attribute to show a verbose date tooltip.\r\n\t// Is `true` by default.\r\n\t// Can be set to `false` to disable the native HTML `tooltip`.\r\n\ttooltip: PropTypes.bool.isRequired,\r\n\r\n\t// Verbose date formatter.\r\n\t// By default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`.\r\n\tformatVerboseDate: PropTypes.func,\r\n\r\n\t// `Intl.DateTimeFormat` format for formatting verbose date.\r\n\t// See `Intl.DateTimeFormat` docs for more info.\r\n\tverboseDateFormat: PropTypes.object,\r\n\r\n\t// (deprecated)\r\n\t// How often the component refreshes itself.\r\n\t// Instead, consider using `getNextTimeToUpdate()` feature\r\n\t// of `javascript-time-ago` styles.\r\n\tupdateInterval: PropTypes.oneOfType([\r\n\t\tPropTypes.number,\r\n\t\tPropTypes.arrayOf(PropTypes.shape({\r\n\t\t\tthreshold: PropTypes.number,\r\n\t\t\tinterval: PropTypes.number.isRequired\r\n\t\t}))\r\n\t]),\r\n\r\n\t// (deprecated).\r\n\t// Set to `false` to disable automatic refresh of the component.\r\n\t// Is `true` by default.\r\n\t// I guess no one actually turns that off.\r\n\ttick: PropTypes.bool,\r\n\r\n\t// Allows setting a custom baseline for relative time measurement.\r\n\t// https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\r\n\tnow: PropTypes.number,\r\n\r\n\t// Allows offsetting the `date` by an arbitrary amount of milliseconds.\r\n\t// https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\r\n\ttimeOffset: PropTypes.number,\r\n\r\n\t// Pass `false` to use native `Intl.RelativeTimeFormat` / `Intl.PluralRules`\r\n\t// instead of the polyfilled ones in `javascript-time-ago`.\r\n\tpolyfill: PropTypes.bool,\r\n\r\n\t// (advanced)\r\n\t// A React Component to wrap the resulting `<time/>` React Element.\r\n\t// Receives `verboseDate` and `children` properties.\r\n\t// Also receives `wrapperProps`, if they're passed.\r\n\t// `verboseDate` can be used for displaying verbose date label\r\n\t// in an \"on mouse over\" (or \"on touch\") tooltip.\r\n\t// See the \"Tooltip\" readme section for more info.\r\n\t// Another example could be having `wrapperComponent`\r\n\t// being rerendered every time the component refreshes itself.\r\n\twrapperComponent: PropTypes.elementType,\r\n\r\n\t// Custom `props` passed to `wrapperComponent`.\r\n\twrapperProps: PropTypes.object\r\n}\r\n\r\nReactTimeAgo.defaultProps = {\r\n\t// No preferred locales.\r\n\tlocales: [],\r\n\r\n\t// Use a `<time/>` tag by default.\r\n\tcomponent: Time,\r\n\r\n\t// Use HTML `tooltip` attribute to show a verbose date tooltip.\r\n\ttooltip: true,\r\n\r\n\t// `Intl.DateTimeFormat` for verbose date.\r\n\t// Example: \"Thursday, December 20, 2012, 7:00:00 AM GMT+4\"\r\n\tverboseDateFormat: {\r\n\t\tweekday: 'long',\r\n\t\tday: 'numeric',\r\n\t\tmonth: 'long',\r\n\t\tyear: 'numeric',\r\n\t\thour: 'numeric',\r\n\t\tminute: '2-digit',\r\n\t\tsecond: '2-digit',\r\n\t\t// timeZoneName: 'short'\r\n\t},\r\n\r\n\t// Automatically refreshes itself.\r\n\ttick: true,\r\n\r\n\t// No time offset.\r\n\ttimeOffset: 0\r\n}\r\n\r\n// The component schedules a next refresh every time it renders.\r\n// There's no need to rerender this component unless its props change.\r\nReactTimeAgo = React.memo(ReactTimeAgo)\r\n\r\nexport default ReactTimeAgo\r\n\r\n// A thousand years is practically a metaphor for \"infinity\"\r\n// in the context of this component.\r\nconst YEAR = 365 * 24 * 60 * 60 * 1000\r\nconst INFINITY = 1000 * YEAR"]},"metadata":{},"sourceType":"module"}